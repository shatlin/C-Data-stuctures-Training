<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0043)http://epaperpress.com/lexandyacc/pry1.html -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1256">
<META content=true name=MSSmartTagsPreventParsing><LINK 
href="pry1_files/format.css" type=text/css rel=stylesheet><LINK 
href="pry1_files/formatFF.css" type=text/css rel=stylesheet>
<SCRIPT language=JavaScript>
if (parent.location.href == self.location.href)
    window.location.href = 'index.html';
</SCRIPT>

<SCRIPT language=JavaScript src="pry1_files/mtmtrack.js"></SCRIPT>

<META content="MSHTML 6.00.2800.1106" name=GENERATOR></HEAD>
<BODY>
<H1>Yacc Practice, Part I</H1>
<P class=center>
<TABLE cellSpacing=0 cellPadding=3 border=1>
  <TBODY>
  <TR align=left>
    <TD>... <I>definitions</I> ...<BR><CODE>%%</CODE><BR>... <I>rules</I> 
      ...<BR><CODE>%%</CODE><BR>... <I>subroutines</I> ... </TD></TR></TBODY></TABLE>
<P>Input to yacc is divided into three sections. The <I>definitions</I> section 
consists of token declarations, and C code bracketed by "<CODE>%{</CODE>" and 
"<CODE>%}</CODE>". The BNF grammar is placed in the <I>rules</I> section, and 
user subroutines are added in the <I>subroutines</I> section. 
<P>This is best illustrated by constructing a small calculator that can add and 
subtract numbers. We’ll begin by examining the linkage between lex and yacc. 
Here is the definitions section for the yacc input file: </P><PRE class=icode>%token INTEGER
</PRE>
<P>This definition declares an <CODE>INTEGER</CODE> token. When we run yacc, it 
generates a parser in file <CODE>y.tab.c</CODE>, and also creates an include 
file, <CODE>y.tab.h</CODE>:</P><PRE class=icode>#ifndef YYSTYPE
#define YYSTYPE int
#endif
#define INTEGER 258
extern YYSTYPE yylval;
</PRE>
<P>Lex includes this file and utilizes the definitions for token values. To 
obtain tokens, yacc calls <CODE>yylex</CODE>. Function <CODE>yylex</CODE> has a 
return type of <CODE>int</CODE>, and returns the token. Values associated with 
the token are returned by lex in variable <CODE>yylval</CODE>. For example,</P><PRE class=icode>[0-9]+      {
                yylval = atoi(yytext);
                return INTEGER;
            }
</PRE>
<P>would store the value of the integer in <CODE>yylval</CODE>, and return token 
<CODE>INTEGER</CODE> to yacc. The type of <CODE>yylval</CODE> is determined by 
<CODE>YYSTYPE</CODE>. Since the default type is integer, this works well in this 
case. Token values 0-255 are reserved for character values. For example, if you 
had a rule such as </P><PRE class=icode>[-+]       return *yytext;    /* return operator */
</PRE>
<P>the character value for minus or plus is returned. Note that we placed the 
minus sign first so that it wouldn’t be mistaken for a range designator. 
Generated token values typically start around 258, as lex reserves several 
values for end-of-file and error processing. Here is the complete lex input 
specification for our calculator: </P><PRE class=icode>%{
    #include "y.tab.h"
    #include &lt;stdlib.h&gt;
    void yyerror(char *);
%}

%%

[0-9]+      {
                yylval = atoi(yytext);
                return INTEGER;
            }

[-+\n]      return *yytext;

[ \t]       ; /* skip whitespace */

.           yyerror("invalid character");

%%

int yywrap(void) {
    return 1;
}
</PRE>
<P>Internally, yacc maintains two stacks in memory; a parse stack and a value 
stack. The parse stack contains terminals and nonterminals, and represents the 
current parsing state. The value stack is an array of <CODE>YYSTYPE</CODE> 
elements, and associates a value with each element in the parse stack. For 
example, when lex returns an <CODE>INTEGER</CODE> token, yacc shifts this token 
to the parse stack. At the same time, the corresponding <CODE>yylval</CODE> is 
shifted to the value stack. The parse and value stacks are always synchronized, 
so finding a value related to a token on the stack is easily accomplished. Here 
is the yacc input specification for our calculator:</P><PRE class=icode>%{
    int yylex(void);
    void yyerror(char *);
%}


%token INTEGER

%%

program:
        program expr '\n'         { printf("%d\n", $2); }
        | 
        ;

expr:
        INTEGER                   { $$ = $1; }
        | expr '+' expr           { $$ = $1 + $3; }
        | expr '-' expr           { $$ = $1 - $3; }
        ;

%%

void yyerror(char *s) {
    fprintf(stderr, "%s\n", s);
}

int main(void) {
    yyparse();
    return 0;
}
</PRE>
<P>The rules section resembles the BNF grammar discussed earlier. The left-hand 
side of a production, or nonterminal, is entered left-justified, followed by a 
colon. This is followed by the right-hand side of the production. Actions 
associated with a rule are entered in braces. 
<P>By utilizing left-recursion, we have specified that a program consists of 
zero or more expressions. Each expression terminates with a newline. When a 
newline is detected, we print the value of the expression. When we apply the 
rule </P><PRE class=icode>expr: expr '+' expr              { $$ = $1 + $3; }
</PRE>
<P>we replace the right-hand side of the production in the parse stack with the 
left-hand side of the same production. In this case, we pop "<CODE>expr '+' 
expr</CODE>" and push "<CODE>expr</CODE>". We have reduced the stack by popping 
three terms off the stack, and pushing back one term. We may reference positions 
in the value stack in our C code by specifying "<CODE>$1</CODE>" for the first 
term on the right-hand side of the production, "<CODE>$2</CODE>" for the second, 
and so on. "<CODE>$$</CODE>" designates the top of the stack after reduction has 
taken place. The above action adds the value associated with two expressions, 
pops three terms off the value stack, and pushes back a single sum. Thus, the 
parse and value stacks remain synchronized. 
<P>Numeric values are initially entered on the stack when we reduce from 
<CODE>INTEGER</CODE> to <CODE>expr</CODE>. After <CODE>INTEGER</CODE> is shifted 
to the stack, we apply the rule </P><PRE class=icode>expr: INTEGER                   { $$ = $1; }
</PRE>
<P>The <CODE>INTEGER</CODE> token is popped off the parse stack, followed by a 
push of <CODE>expr</CODE>. For the value stack, we pop the integer value off the 
stack, and then push it back on again. In other words, we do nothing. In fact, 
this is the default action, and need not be specified. Finally, when a newline 
is encountered, the value associated with <CODE>expr</CODE> is printed. 
<P>In the event of syntax errors, yacc calls the user-supplied function 
<CODE>yyerror</CODE>. If you need to modify the interface to yyerror, you can 
alter the canned file that yacc includes to fit your needs. The last function in 
our yacc specification is <CODE>main</CODE> … in case you were wondering where 
it was. This example still has an ambiguous grammar. Yacc will issue 
shift-reduce warnings, but will still process the grammar using shift as the 
default operation. </P></BODY></HTML>

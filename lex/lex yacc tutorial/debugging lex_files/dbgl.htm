<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0043)http://epaperpress.com/lexandyacc/dbgl.html -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1256">
<META content=true name=MSSmartTagsPreventParsing><LINK 
href="dbgl_files/format.css" type=text/css rel=stylesheet><LINK 
href="dbgl_files/formatFF.css" type=text/css rel=stylesheet>
<SCRIPT language=JavaScript>
if (parent.location.href == self.location.href)
    window.location.href = 'index.html';
</SCRIPT>

<SCRIPT language=JavaScript src="dbgl_files/mtmtrack.js"></SCRIPT>

<META content="MSHTML 6.00.2800.1106" name=GENERATOR></HEAD>
<BODY>
<H1>Debugging Lex</H1>
<P>Lex has facilities that enable debugging. This feature may vary with 
different versions of lex, so you should consult documentation for details. The 
code generated by lex in file <CODE>lex.yy.c</CODE> includes debugging 
statements that are enabled by specifying command-line option "<CODE>-d</CODE>". 
Debug output in flex (a GNU version of lex) may be toggled on and off by setting 
<CODE>yy_flex_debug</CODE>. Output includes the rule applied and corresponding 
matched text. If you’re running lex and yacc together, specify the following in 
your yacc input file:</P><PRE class=icode>extern int yy_flex_debug;
int main(void) {
    yy_flex_debug = 1;
    yyparse();
}
</PRE>
<P>Alternatively, you may write your own debug code by defining functions that 
display information for the token value, and each variant of the 
<CODE>yylval</CODE> union. This is illustrated in the following example. When 
<CODE>DEBUG</CODE> is defined, the debug functions take effect, and a trace of 
tokens and associated values is displayed.</P><PRE class=icode>%union {
    int ivalue;
    ...
};

%{
#ifdef DEBUG
    int dbgToken(int tok, char *s) {
        printf("token %s\n", s);
        return tok;
    }
    int dbgTokenIvalue(int tok, char *s) {
        printf("token %s (%d)\n", s, yylval.ivalue);
        return tok;
    }
    #define RETURN(x) return dbgToken(x, #x)
    #define RETURN_ivalue(x) return dbgTokenIvalue(x, #x)
#else
    #define RETURN(x) return(x)
    #define RETURN_ivalue(x) return(x)
#endif
%}

%%

[0-9]+      {
                yylval.ivalue = atoi(yytext);
                RETURN_ivalue(INTEGER);
            }

"if"        RETURN(IF);
"else"      RETURN(ELSE);
</PRE></BODY></HTML>

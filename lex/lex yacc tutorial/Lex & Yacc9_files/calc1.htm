<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0044)http://epaperpress.com/lexandyacc/calc1.html -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1256">
<META content=true name=MSSmartTagsPreventParsing><LINK 
href="calc1_files/format.css" type=text/css rel=stylesheet><LINK 
href="calc1_files/formatFF.css" type=text/css rel=stylesheet>
<SCRIPT language=JavaScript>
if (parent.location.href == self.location.href)
    window.location.href = 'index.html';
</SCRIPT>

<SCRIPT language=JavaScript src="calc1_files/mtmtrack.js"></SCRIPT>

<META content="MSHTML 6.00.2800.1106" name=GENERATOR></HEAD>
<BODY>
<H1>Interpreter</H1><PRE class=code>#include &lt;stdio.h&gt;
#include "calc3.h"
#include "y.tab.h"

int ex(nodeType *p) {
    if (!p) return 0;
    switch(p-&gt;type) {
    case typeCon:       return p-&gt;con.value;
    case typeId:        return sym[p-&gt;id.i];
    case typeOpr:
        switch(p-&gt;opr.oper) {
        case WHILE:     while(ex(p-&gt;opr.op[0])) ex(p-&gt;opr.op[1]); return 0;
        case IF:        if (ex(p-&gt;opr.op[0]))
                            ex(p-&gt;opr.op[1]);
                        else if (p-&gt;opr.nops &gt; 2)
                            ex(p-&gt;opr.op[2]);
                        return 0;
        case PRINT:     printf("%d\n", ex(p-&gt;opr.op[0])); return 0;
        case ';':       ex(p-&gt;opr.op[0]); return ex(p-&gt;opr.op[1]);
        case '=':       return sym[p-&gt;opr.op[0]-&gt;id.i] = ex(p-&gt;opr.op[1]);
        case UMINUS:    return -ex(p-&gt;opr.op[0]);
        case '+':       return ex(p-&gt;opr.op[0]) + ex(p-&gt;opr.op[1]);
        case '-':       return ex(p-&gt;opr.op[0]) - ex(p-&gt;opr.op[1]);
        case '*':       return ex(p-&gt;opr.op[0]) * ex(p-&gt;opr.op[1]);
        case '/':       return ex(p-&gt;opr.op[0]) / ex(p-&gt;opr.op[1]);
        case '&lt;':       return ex(p-&gt;opr.op[0]) &lt; ex(p-&gt;opr.op[1]);
        case '&gt;':       return ex(p-&gt;opr.op[0]) &gt; ex(p-&gt;opr.op[1]);
        case GE:        return ex(p-&gt;opr.op[0]) &gt;= ex(p-&gt;opr.op[1]);
        case LE:        return ex(p-&gt;opr.op[0]) &lt;= ex(p-&gt;opr.op[1]);
        case NE:        return ex(p-&gt;opr.op[0]) != ex(p-&gt;opr.op[1]);
        case EQ:        return ex(p-&gt;opr.op[0]) == ex(p-&gt;opr.op[1]);
        }
    }
    return 0;
}
</PRE></BODY></HTML>
